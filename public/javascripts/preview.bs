#Remember Prism.highlightAll()

CodeViewTemplate = '<h1>Preview</h1>
{{#if error}}<div class="alert alert-danger">{{error}}</div>{{/if}}
{{#if bare}}
<label>--bare </label><pre><code id="barePreview" class="language-coffeescript">{{bare}}</code></pre>
{{/if}}
{{#if node}}
<label>--node</label><pre><code id="nodePreview" class="language-coffeescript">{{node}}</code></pre>
{{/if}}
{{#if default}}
<label>default options </label><pre><code id="defaultPreview" class="language-coffeescript">{{default}}</code></pre>
{{/if}}'


CodeModel = Backbone.Model.extend({
  bare: undefined
  node: undefined
  default: undefined

  compile: (bs) ->
    console.log('compiles')
    $.post( "/api/parse", { bs: bs }, (data) ->
      @@set({
        bare: data.bare
        node: data.node
        default: data.default
        error: data.error instanceof Object ? 'Line: #{data.error.line}, Message: #{data.error.message}' : data.error
      })
    )
})

FormView = Backbone.View.extend({
  el: $('form')

  events: {
    "keyup textarea[name=bs]": "updatePreview"
  }

  initialize: () ->
    _.bindAll(@, 'updatePreview')

  updatePreview: () ->
    model.compile($('textarea[name=bs]').val())
})

CodeView = Backbone.View.extend({
  initialize: () ->
    _.bindAll(@, 'render')
    @listenTo(@model, 'change', @render)
    @render()

  render: () ->
    template = Handlebars.compile(CodeViewTemplate)
    $('##{@id}').html(template(model.attributes))
    Prism.highlightAll()
    return @
})

model = new CodeModel({})
codeView = new CodeView({ model: model, id: 'preview' })
formView = new FormView({ model: model })
